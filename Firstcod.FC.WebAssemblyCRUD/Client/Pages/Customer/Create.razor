@page "/customer/create"

@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h3>Create Member</h3>
<hr />

<div class="row">
    <EditForm Model="_member" OnValidSubmit="@(async () => await CreateMember())" class="col s12">
        <div class="row">
            <div class="input-field col s6">
                <input id="first_name" type="text" @bind-value="_member.Name" class="validate" required />
                <label for="first_name">First Name</label>
            </div>
            <div class="input-field col s6">
                <input id="last_name" type="text" @bind-value="_member.LastName" class="validate" required />
                <label for="last_name">Last Name</label>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s12">
                <input id="password" type="password" @bind-value="_member.Password" class="validate" required />
                <label for="password">Password</label>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s12">
                <input id="email" type="email" @bind-value="_member.EmailAddress" class="validate" required />
                <label for="email">Email</label>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s12">
                <label>
                    <input type="checkbox" required />
                    <span>I Agree</span>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s12">
                <button class="btn waves-effect waves-light right" type="submit" name="action">
                    Create
                    <i class="material-icons right">send</i>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@if (_memberList.Count() == 0)
{
    <div class="row">
        Data notfound..
    </div>
}
else
{
    <div class="row">
        <a href="/customer/liste" class="btn btn-primary">Members list</a>
    </div>
    <div class="row">
        <table>
            <tr>
                <th>Name</th>
                <th>Email Address</th>
                <th>Update Date</th>
                <th>Create Date</th>
                <th></th>
            </tr>
            @foreach (var item in _memberList)
            {
                <tr>
                    <td>@item.Name @item.LastName</td>
                    <td>@item.EmailAddress</td>
                    <td>@item.UpdateDate</td>
                    <td>@item.CreateDate</td>
                    <td>
                        <a href="/customer/edit/@item.Id" class="btn btn-primary"><i class="material-icons">edit</i></a>
                        <button class="btn btn-danger" @onclick="@(() => DeleteMember(item.Id))"><i class="material-icons">delete</i></button>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {

    private List<Member> _memberList = new List<Member>();

    private Member _member = new Member();

    private async Task GetMember() =>
        _memberList = await Http.GetJsonAsync<List<Member>>("Members");

    protected override async Task OnInitializedAsync()
    {
        await GetMember();
    }

    private async Task CreateMember()
    {
        await Http.PostJsonAsync("Members", _member);
        _member = new Member();
        await GetMember();
    }

    private async Task DeleteMember(long id)
    {
        // c# to javascript
        await jsRuntime.InvokeVoidAsync("Service.alert", id, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task DeleteMethod(long id)
    {
        await Http.DeleteAsync($"Members/{id}");

        await GetMember();

        StateHasChanged();
    }
}